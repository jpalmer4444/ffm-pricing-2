2017-04-02T08:02:28-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T08:02:28-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:02:29-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T08:02:29-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:02:29-05:00 INFO (6): zff_sync:
2017-04-02T08:02:29-05:00 INFO (6): DB Sync Skipped on subsequent ajax.
2017-04-02T08:02:29-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T08:02:29-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T08:02:29-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)
2017-04-02T08:02:29-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:02:29-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T08:02:29-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:02:29-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:06:19-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T08:06:19-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:06:20-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T08:06:20-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:06:20-05:00 INFO (6): zff_sync: 0
2017-04-02T08:06:20-05:00 INFO (6): DB Sync Skipped on subsequent ajax.
2017-04-02T08:06:20-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T08:06:20-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T08:06:20-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)
2017-04-02T08:06:20-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:06:20-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T08:06:20-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:06:20-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:09:47-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T08:09:47-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:09:48-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T08:09:48-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:09:48-05:00 INFO (6): zff_sync: 0
2017-04-02T08:09:48-05:00 INFO (6): DB Sync Skipped on subsequent ajax.
2017-04-02T08:09:48-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T08:09:48-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T08:09:48-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)
2017-04-02T08:09:48-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:09:48-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T08:09:48-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:09:48-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:11:23-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T08:11:23-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:11:23-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T08:11:23-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:11:23-05:00 INFO (6): zff_sync: 0
2017-04-02T08:11:23-05:00 INFO (6): DB Sync Skipped on subsequent ajax.
2017-04-02T08:11:23-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T08:11:23-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T08:11:23-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)
2017-04-02T08:11:23-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:11:23-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T08:11:23-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:11:23-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:11:54-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T08:11:54-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:11:55-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T08:11:55-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:11:55-05:00 INFO (6): zff_sync: 0
2017-04-02T08:11:55-05:00 INFO (6): DB Sync Skipped on subsequent ajax.
2017-04-02T08:11:55-05:00 INFO (6): LIMIT = LIMIT 0, 250
2017-04-02T08:11:55-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T08:11:55-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)
2017-04-02T08:11:55-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T08:11:55-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 250
2017-04-02T08:11:55-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T08:11:55-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T08:12:04-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T08:12:04-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:12:05-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T08:12:05-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:12:05-05:00 INFO (6): zff_sync: 0
2017-04-02T08:12:05-05:00 INFO (6): DB Sync Skipped on subsequent ajax.
2017-04-02T08:12:05-05:00 INFO (6): LIMIT = LIMIT 0, 250
2017-04-02T08:12:05-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T08:12:05-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)
2017-04-02T08:12:05-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T08:12:05-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 250
2017-04-02T08:12:05-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T08:12:05-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T08:12:25-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T08:12:25-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:12:26-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T08:12:26-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T08:12:26-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T08:12:26-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T08:12:26-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T08:12:26-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T08:12:27-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T08:12:27-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:12:27-05:00 INFO (6): zff_sync: 0
2017-04-02T08:12:27-05:00 INFO (6): DB Sync Skipped on subsequent ajax.
2017-04-02T08:12:27-05:00 INFO (6): LIMIT = LIMIT 0, 250
2017-04-02T08:12:27-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T08:12:27-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)
2017-04-02T08:12:27-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T08:12:27-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 250
2017-04-02T08:12:27-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T08:12:27-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T08:14:23-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T08:14:23-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:14:23-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T08:14:23-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:14:24-05:00 INFO (6): zff_sync: 1
2017-04-02T08:14:24-05:00 INFO (6): Syncing DB. Products Controller
2017-04-02T08:14:24-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=customerlistitems&customerid=46
2017-04-02T08:14:26-05:00 INFO (6): Web Service (Products) #: 135
2017-04-02T08:14:26-05:00 INFO (6): Customer: 46
2017-04-02T08:14:26-05:00 INFO (6): Preferences by user: 0
2017-04-02T08:14:26-05:00 INFO (6): Products: 0
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 581, sku = 105000001, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  581 , sku =  105000001 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 192, sku = 851, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  192 , sku =  851 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 918, sku = 851001, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  918 , sku =  851001 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 133, sku = 11100001, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  133 , sku =  11100001 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 928, sku = 11600004, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  928 , sku =  11600004 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 754, sku = 116, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  754 , sku =  116 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 496, sku = 1882, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  496 , sku =  1882 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 43, sku = 4, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  43 , sku =  4 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 211, sku = 856, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  211 , sku =  856 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 799, sku = 25401, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  799 , sku =  25401 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 370, sku = 17031702, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  370 , sku =  17031702 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 1334, sku = 55055401, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  1334 , sku =  55055401 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 146, sku = 958, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  146 , sku =  958 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 159, sku = 340, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  159 , sku =  340 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 435, sku = 964, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  435 , sku =  964 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 23, sku = 22, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  23 , sku =  22 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 1277, sku = 77773, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  1277 , sku =  77773 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 525, sku = 769, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  525 , sku =  769 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 209, sku = 260, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  209 , sku =  260 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 481, sku = 1853, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  481 , sku =  1853 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 1164, sku = 1413, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  1164 , sku =  1413 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 863, sku = 3141, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  863 , sku =  3141 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 479, sku = 1848, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  479 , sku =  1848 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 705, sku = 2556, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  705 , sku =  2556 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 329, sku = 1198, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  329 , sku =  1198 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 239, sku = 447, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  239 , sku =  447 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 990, sku = 98696002, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  990 , sku =  98696002 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 126, sku = 71, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  126 , sku =  71 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 1001, sku = 17290501, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  1001 , sku =  17290501 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 947, sku = 266, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  947 , sku =  266 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 90, sku = 268, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  90 , sku =  268 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 41, sku = 17, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  41 , sku =  17 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 62, sku = 10, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  62 , sku =  10 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 223, sku = 221, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  223 , sku =  221 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 226, sku = 1400002, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  226 , sku =  1400002 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): SKIPPING: Rest Item ID: 226 SKU: 1400002 PRODUCTNAME: Hake - Wild, USA, Sow, Head Off (8lb avg)
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 451, sku = 17293301, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  451 , sku =  17293301 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 450, sku = 753, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  450 , sku =  753 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 268, sku = 32, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  268 , sku =  32 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 543, sku = 2035, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  543 , sku =  2035 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 679, sku = 2494, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  679 , sku =  2494 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 215, sku = 474, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  215 , sku =  474 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 217, sku = 295, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  217 , sku =  295 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 1300, sku = 97314002, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  1300 , sku =  97314002 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 76, sku = 355, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  76 , sku =  355 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 77, sku = 35500001, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  77 , sku =  35500001 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): SKIPPING: Rest Item ID: 77 SKU: 35500001 PRODUCTNAME: Lobster - Live, Cold Water, Wild, Canada, 1.5lb
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 750, sku = 9731408, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  750 , sku =  9731408 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 454, sku = 15800001, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  454 , sku =  15800001 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 220, sku = 158, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  220 , sku =  158 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 301, sku = 161, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  301 , sku =  161 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 188, sku = 48, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  188 , sku =  48 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 73, sku = 10003, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  73 , sku =  10003 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 721, sku = 2603, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  721 , sku =  2603 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 978, sku = 79872002, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  978 , sku =  79872002 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 336, sku = 7987201, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  336 , sku =  7987201 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 977, sku = 79872001, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  977 , sku =  79872001 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 94, sku = 814, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  94 , sku =  814 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 611, sku = 2254, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  611 , sku =  2254 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): SKIPPING: Rest Item ID: 611 SKU: 2254 PRODUCTNAME: Oysters - East Coast, Sewansecott, Farmed, USA 100ct
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 111, sku = 824, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  111 , sku =  824 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 910, sku = 7986806, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  910 , sku =  7986806 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 742, sku = 79868001, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  742 , sku =  79868001 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 916, sku = 7986813, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  916 , sku =  7986813 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 1050, sku = 64157801, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  1050 , sku =  64157801 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 485, sku = 1861, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  485 , sku =  1861 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 237, sku = 171, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  237 , sku =  171 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): SKIPPING: Rest Item ID: 237 SKU: 171 PRODUCTNAME: Pollock - Wild, USA, Fillets
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 236, sku = 167, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  236 , sku =  167 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): SKIPPING: Rest Item ID: 236 SKU: 167 PRODUCTNAME: Pollock - Wild, USA, Large, Head On (8lb avg)
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 968, sku = 229, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:26-05:00 INFO (6): Creating Preference[ product =  968 , sku =  229 , user = cmetallo]
2017-04-02T08:14:26-05:00 INFO (6): SKIPPING: Rest Item ID: 968 SKU: 229 PRODUCTNAME: Porgy - Jumbo, Wild, USA, Whole (2.5lb avg)
2017-04-02T08:14:26-05:00 INFO (6): Creating Product[ id = 967, sku = 228, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  967 , sku =  228 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 362, sku = 485, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  362 , sku =  485 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): SKIPPING: Rest Item ID: 362 SKU: 485 PRODUCTNAME: Salmon - Atlantic, Farmed, Canada, Fillets  (9lb Pair)
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 794, sku = 2876, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  794 , sku =  2876 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 250, sku = 911, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  250 , sku =  911 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): SKIPPING: Rest Item ID: 250 SKU: 911 PRODUCTNAME: Salmon - Atlantic, Farmed, Canada, Head On (11lb avg)
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 464, sku = 1708, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  464 , sku =  1708 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 252, sku = 887, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  252 , sku =  887 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 755, sku = 190701, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  755 , sku =  190701 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 49, sku = 81, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  49 , sku =  81 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): SKIPPING: Rest Item ID: 49 SKU: 81 PRODUCTNAME: Salmon - Hiddenfjord, Farmed, Faroe Islands, Fillets  (9lb Pair)
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1048, sku = 801001, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1048 , sku =  801001 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 45, sku = 80, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  45 , sku =  80 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 958, sku = 1908, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  958 , sku =  1908 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 817, sku = 2882, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  817 , sku =  2882 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 95, sku = 481, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  95 , sku =  481 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): SKIPPING: Rest Item ID: 95 SKU: 481 PRODUCTNAME: Salmon - True North, Farmed, Canada, Head On (13lb avg)
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 956, sku = 2887, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  956 , sku =  2887 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 813, sku = 2924, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  813 , sku =  2924 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 31, sku = 18, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  31 , sku =  18 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 37, sku = 61, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  37 , sku =  61 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1325, sku = 79718001, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1325 , sku =  79718001 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 100, sku = 564, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  100 , sku =  564 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 626, sku = 2291, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  626 , sku =  2291 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1265, sku = 16199701, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1265 , sku =  16199701 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1401, sku = 551574001, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1401 , sku =  551574001 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1292, sku = 1887, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1292 , sku =  1887 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 870, sku = 55157403, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  870 , sku =  55157403 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 434, sku = 55157402, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  434 , sku =  55157402 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 603, sku = 551682012, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  603 , sku =  551682012 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 105, sku = 55168201, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  105 , sku =  55168201 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 597, sku = 2187, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  597 , sku =  2187 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1216, sku = 55168215, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1216 , sku =  55168215 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1146, sku = 551682011, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1146 , sku =  551682011 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 823, sku = 2947, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  823 , sku =  2947 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 920, sku = 56414501, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  920 , sku =  56414501 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 244, sku = 751782000087, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  244 , sku =  751782000087 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 257, sku = 183, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  257 , sku =  183 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 841, sku = 3001, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  841 , sku =  3001 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1021, sku = 17301603, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1021 , sku =  17301603 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 283, sku = 599, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  283 , sku =  599 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 284, sku = 596, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  284 , sku =  596 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1041, sku = 595, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1041 , sku =  595 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 142, sku = 466, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  142 , sku =  466 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 141, sku = 1, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  141 , sku =  1 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 563, sku = 1784, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  563 , sku =  1784 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): SKIPPING: Rest Item ID: 563 SKU: 1784 PRODUCTNAME: Squid - Frozen, Wild, China, 5/8 T&T (2.5lb Tray)
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 641, sku = 2330, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  641 , sku =  2330 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 759, sku = 2702, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  759 , sku =  2702 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 573, sku = 2142, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  573 , sku =  2142 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1204, sku = 2327, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1204 , sku =  2327 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 640, sku = 2326, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  640 , sku =  2326 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 564, sku = 1752, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  564 , sku =  1752 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 664, sku = 1758, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  664 , sku =  1758 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 729, sku = 55326901, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  729 , sku =  55326901 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): SKIPPING: Rest Item ID: 729 SKU: 55326901 PRODUCTNAME: Sturgeon - White, Farmed, USA, Whole (12lb avg)
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1178, sku = 442, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1178 , sku =  442 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 288, sku = 8, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  288 , sku =  8 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 1170, sku = 2954, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  1170 , sku =  2954 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 952, sku = 17241901, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  952 , sku =  17241901 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 93, sku = 2800101, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  93 , sku =  2800101 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 385, sku = 172423014, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  385 , sku =  172423014 , user = cmetallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Product[ id = 382, sku = 172423011, customer.company = FultonFishMarket.com, customer.name = Cyndi Metallo]
2017-04-02T08:14:27-05:00 INFO (6): Creating Preference[ product =  382 , sku =  172423011 , user = cmetallo]
2017-04-02T08:14:28-05:00 INFO (6): Created 123 products
2017-04-02T08:14:28-05:00 INFO (6): Created 123 preferences
2017-04-02T08:14:28-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T08:14:28-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T08:14:28-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)
2017-04-02T08:14:28-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:14:28-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T08:14:28-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:14:28-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 46 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 46 AND `added_product`.`active` = 1 )
2017-04-02T08:50:29-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\CustomerController and actionName: view
2017-04-02T08:50:29-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:50:30-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\CustomerController and actionName: customerTable
2017-04-02T08:50:30-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:50:30-05:00 INFO (6): Syncing DB. Customer Controller
2017-04-02T08:50:30-05:00 INFO (6): Querying Customers.
2017-04-02T08:50:30-05:00 INFO (6): Querying Customers.
2017-04-02T08:50:30-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=customers&salespersonid=183
2017-04-02T08:50:31-05:00 INFO (6): inDB: 46 inWS: 46
2017-04-02T08:50:31-05:00 INFO (6): SELECT `customers`.`id`, `customers`.`company`, `customers`.`name`, `customers`.`email`, `customers`.`created`, `customers`.`updated`, `customers`.`id` FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id` WHERE  `user_customer`.`user_id` = 5  ORDER BY `id` ASC LIMIT 0, 25
2017-04-02T08:50:31-05:00 INFO (6): SQL: SELECT `customers`.`id`, `customers`.`company`, `customers`.`name`, `customers`.`email`, `customers`.`created`, `customers`.`updated`, `customers`.`id` FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id` WHERE  `user_customer`.`user_id` = 5  ORDER BY `id` ASC LIMIT 0, 25
2017-04-02T08:50:31-05:00 INFO (6): SQL: SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`   WHERE  `user_customer`.`user_id` = 5
2017-04-02T08:50:31-05:00 INFO (6): SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`   WHERE  `user_customer`.`user_id` = 5
2017-04-02T08:50:31-05:00 INFO (6): SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`  WHERE  `user_customer`.`user_id` = 5
2017-04-02T08:50:31-05:00 INFO (6): SQL: SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`  WHERE  `user_customer`.`user_id` = 5
2017-04-02T08:50:35-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\CustomerController and actionName: customerTable
2017-04-02T08:50:35-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:50:35-05:00 INFO (6): DB Sync Skipped on subsequent ajax.
2017-04-02T08:50:35-05:00 INFO (6): SELECT `customers`.`id`, `customers`.`company`, `customers`.`name`, `customers`.`email`, `customers`.`created`, `customers`.`updated`, `customers`.`id` FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id` WHERE  `user_customer`.`user_id` = 5  ORDER BY `company` ASC LIMIT 0, 25
2017-04-02T08:50:35-05:00 INFO (6): SQL: SELECT `customers`.`id`, `customers`.`company`, `customers`.`name`, `customers`.`email`, `customers`.`created`, `customers`.`updated`, `customers`.`id` FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id` WHERE  `user_customer`.`user_id` = 5  ORDER BY `company` ASC LIMIT 0, 25
2017-04-02T08:50:35-05:00 INFO (6): SQL: SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`   WHERE  `user_customer`.`user_id` = 5
2017-04-02T08:50:35-05:00 INFO (6): SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`   WHERE  `user_customer`.`user_id` = 5
2017-04-02T08:50:35-05:00 INFO (6): SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`  WHERE  `user_customer`.`user_id` = 5
2017-04-02T08:50:35-05:00 INFO (6): SQL: SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`  WHERE  `user_customer`.`user_id` = 5
2017-04-02T08:50:50-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T08:50:50-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:50:51-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T08:50:51-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:50:51-05:00 INFO (6): zff_sync: 1
2017-04-02T08:50:51-05:00 INFO (6): Syncing DB. Products Controller
2017-04-02T08:50:51-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=customerlistitems&customerid=398
2017-04-02T08:50:52-05:00 INFO (6): Web Service (Products) #: 16
2017-04-02T08:50:52-05:00 INFO (6): Customer: 398
2017-04-02T08:50:52-05:00 INFO (6): Preferences by user: 123
2017-04-02T08:50:52-05:00 INFO (6): Products: 7
2017-04-02T08:50:52-05:00 INFO (6): Creating Product[ id = 873, sku = 16768102, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T08:50:52-05:00 INFO (6): Creating Preference[ product =  873 , sku =  16768102 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Creating Product[ id = 134, sku = 632, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T08:50:52-05:00 INFO (6): Creating Preference[ product =  134 , sku =  632 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Creating Product[ id = 648, sku = 2360, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T08:50:52-05:00 INFO (6): Creating Preference[ product =  648 , sku =  2360 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Creating Product[ id = 91, sku = 363, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T08:50:52-05:00 INFO (6): Creating Preference[ product =  91 , sku =  363 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Updating Product[ id = 77, sku = 35500001, ]
2017-04-02T08:50:52-05:00 INFO (6): Updating Preference[ product =  77 , sku =  35500001 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Updating Product[ id = 73, sku = 10003, ]
2017-04-02T08:50:52-05:00 INFO (6): Updating Preference[ product =  73 , sku =  10003 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Creating Product[ id = 253, sku = 893, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T08:50:52-05:00 INFO (6): Creating Preference[ product =  253 , sku =  893 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Updating Product[ id = 817, sku = 2882, ]
2017-04-02T08:50:52-05:00 INFO (6): Updating Preference[ product =  817 , sku =  2882 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Updating Product[ id = 95, sku = 481, ]
2017-04-02T08:50:52-05:00 INFO (6): Updating Preference[ product =  95 , sku =  481 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Updating Product[ id = 37, sku = 61, ]
2017-04-02T08:50:52-05:00 INFO (6): Updating Preference[ product =  37 , sku =  61 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Updating Product[ id = 603, sku = 551682012, ]
2017-04-02T08:50:52-05:00 INFO (6): Updating Preference[ product =  603 , sku =  551682012 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Creating Product[ id = 173, sku = 894407001599, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T08:50:52-05:00 INFO (6): Creating Preference[ product =  173 , sku =  894407001599 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Creating Product[ id = 343, sku = 8237201, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T08:50:52-05:00 INFO (6): Creating Preference[ product =  343 , sku =  8237201 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Creating Product[ id = 575, sku = 2146, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T08:50:52-05:00 INFO (6): Creating Preference[ product =  575 , sku =  2146 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Updating Product[ id = 564, sku = 1752, ]
2017-04-02T08:50:52-05:00 INFO (6): Updating Preference[ product =  564 , sku =  1752 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Creating Product[ id = 566, sku = 8237202, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T08:50:52-05:00 INFO (6): Creating Preference[ product =  566 , sku =  8237202 , user = cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 23
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=23,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 31
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=31,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 41
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=41,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 43
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=43,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 45
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=45,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 49
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=49,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 62
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=62,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 76
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=76,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 90
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=90,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 93
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=93,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 94
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=94,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 100
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=100,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 105
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=105,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 111
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=111,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 126
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=126,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 133
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=133,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 141
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=141,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 142
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=142,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 146
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=146,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 159
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=159,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 188
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=188,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 192
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=192,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 209
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=209,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 211
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=211,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 215
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=215,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 217
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=217,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 220
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=220,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 223
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=223,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 226
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=226,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 236
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=236,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 237
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=237,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 239
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=239,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 244
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=244,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 250
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=250,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 252
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=252,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 257
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=257,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 268
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=268,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 283
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=283,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 284
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=284,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 288
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=288,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 301
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=301,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 329
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=329,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 336
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=336,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 362
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=362,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 370
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=370,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 382
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=382,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 385
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=385,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 434
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=434,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 435
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=435,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 450
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=450,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 451
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=451,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 454
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=454,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 464
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=464,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 479
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=479,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 481
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=481,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 485
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=485,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 496
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=496,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 525
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=525,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 543
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=543,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 563
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=563,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 573
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=573,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 581
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=581,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 597
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=597,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 611
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=611,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 626
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=626,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 640
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=640,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 641
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=641,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 664
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=664,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 679
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=679,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 705
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=705,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 721
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=721,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 729
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=729,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 742
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=742,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 750
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=750,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 754
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=754,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 755
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=755,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 759
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=759,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 794
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=794,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 799
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=799,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 813
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=813,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 823
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=823,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 841
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=841,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 863
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=863,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 870
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=870,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 910
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=910,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 916
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=916,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 918
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=918,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 920
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=920,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 928
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=928,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 947
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=947,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 952
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=952,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 956
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=956,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 958
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=958,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 967
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=967,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 968
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=968,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 977
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=977,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 978
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=978,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 990
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=990,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1001
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1001,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1021
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1021,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1041
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1041,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1048
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1048,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1050
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1050,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1146
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1146,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1164
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1164,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1170
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1170,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1178
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1178,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1204
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1204,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1216
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1216,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1265
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1265,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1277
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1277,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1292
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1292,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1300
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1300,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1325
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1325,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1334
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1334,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): find(type=json) not found = 1401
2017-04-02T08:50:52-05:00 INFO (6): Deleting Preference[product=1401,user=cmetallo]
2017-04-02T08:50:52-05:00 INFO (6): Created 9 products
2017-04-02T08:50:52-05:00 INFO (6): Created 9 preferences
2017-04-02T08:50:52-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T08:50:52-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T08:50:52-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)
2017-04-02T08:50:52-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T08:50:52-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T08:50:52-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T08:50:52-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T08:53:12-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T08:53:12-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:53:12-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T08:53:12-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:53:12-05:00 INFO (6): zff_sync: 1
2017-04-02T08:53:12-05:00 INFO (6): Syncing DB. Products Controller
2017-04-02T08:53:12-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=customerlistitems&customerid=398
2017-04-02T08:53:13-05:00 INFO (6): Web Service (Products) #: 16
2017-04-02T08:53:14-05:00 INFO (6): Customer: 398
2017-04-02T08:53:14-05:00 INFO (6): Preferences by user: 16
2017-04-02T08:53:14-05:00 INFO (6): Products: 16
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 873, sku = 16768102, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  873 , sku =  16768102 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 134, sku = 632, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  134 , sku =  632 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 648, sku = 2360, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  648 , sku =  2360 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 91, sku = 363, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  91 , sku =  363 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 77, sku = 35500001, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  77 , sku =  35500001 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 73, sku = 10003, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  73 , sku =  10003 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 253, sku = 893, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  253 , sku =  893 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 817, sku = 2882, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  817 , sku =  2882 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 95, sku = 481, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  95 , sku =  481 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 37, sku = 61, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  37 , sku =  61 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 603, sku = 551682012, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  603 , sku =  551682012 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 173, sku = 894407001599, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  173 , sku =  894407001599 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 343, sku = 8237201, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  343 , sku =  8237201 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 575, sku = 2146, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  575 , sku =  2146 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 564, sku = 1752, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  564 , sku =  1752 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Updating Product[ id = 566, sku = 8237202, ]
2017-04-02T08:53:14-05:00 INFO (6): Updating Preference[ product =  566 , sku =  8237202 , user = cmetallo]
2017-04-02T08:53:14-05:00 INFO (6): Created 0 products
2017-04-02T08:53:14-05:00 INFO (6): Created 0 preferences
2017-04-02T08:53:14-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T08:53:14-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T08:53:14-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)
2017-04-02T08:53:14-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T08:53:14-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T08:53:14-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T08:53:14-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T08:58:46-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T08:58:46-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:58:47-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T08:58:47-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T08:58:47-05:00 INFO (6): zff_sync: 1
2017-04-02T08:58:47-05:00 INFO (6): Syncing DB. Products Controller
2017-04-02T08:58:47-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=customerlistitems&customerid=398
2017-04-02T08:58:48-05:00 INFO (6): Web Service (Products) #: 16
2017-04-02T08:58:48-05:00 INFO (6): Customer: 398
2017-04-02T08:58:48-05:00 INFO (6): Preferences by user: 16
2017-04-02T08:58:48-05:00 INFO (6): Products: 16
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 873, sku = 16768102, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  873 , sku =  16768102 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 134, sku = 632, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  134 , sku =  632 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 648, sku = 2360, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  648 , sku =  2360 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 91, sku = 363, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  91 , sku =  363 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 77, sku = 35500001, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  77 , sku =  35500001 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 73, sku = 10003, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  73 , sku =  10003 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 253, sku = 893, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  253 , sku =  893 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 817, sku = 2882, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  817 , sku =  2882 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 95, sku = 481, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  95 , sku =  481 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 37, sku = 61, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  37 , sku =  61 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 603, sku = 551682012, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  603 , sku =  551682012 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 173, sku = 894407001599, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  173 , sku =  894407001599 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 343, sku = 8237201, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  343 , sku =  8237201 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 575, sku = 2146, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  575 , sku =  2146 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 564, sku = 1752, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  564 , sku =  1752 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Updating Product[ id = 566, sku = 8237202, ]
2017-04-02T08:58:48-05:00 INFO (6): Updating Preference[ product =  566 , sku =  8237202 , user = cmetallo]
2017-04-02T08:58:48-05:00 INFO (6): Created 0 products
2017-04-02T08:58:48-05:00 INFO (6): Created 0 preferences
2017-04-02T08:58:48-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T08:58:48-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T08:58:48-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)
2017-04-02T08:58:48-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T08:58:48-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T08:58:48-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T08:58:48-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:02:12-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T09:02:12-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:02:14-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T09:02:14-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T09:02:14-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T09:02:14-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T09:02:14-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T09:02:14-05:00 ERR (3):  Error dispatching controller "". Error was: "error-router-no-match"
2017-04-02T09:02:15-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T09:02:15-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:02:15-05:00 INFO (6): zff_sync: 1
2017-04-02T09:02:15-05:00 INFO (6): Syncing DB. Products Controller
2017-04-02T09:02:15-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=customerlistitems&customerid=569
2017-04-02T09:02:16-05:00 INFO (6): Web Service (Products) #: 11
2017-04-02T09:02:16-05:00 INFO (6): Customer: 569
2017-04-02T09:02:16-05:00 INFO (6): Preferences by user: 0
2017-04-02T09:02:16-05:00 INFO (6): Products: 1
2017-04-02T09:02:16-05:00 INFO (6): Creating Product[ id = 896, sku = 8149603, customer.company = 14 & Hudson , customer.name = Eric Woods]
2017-04-02T09:02:16-05:00 INFO (6): Creating Preference[ product =  896 , sku =  8149603 , user = jmeade]
2017-04-02T09:02:16-05:00 INFO (6): Creating Product[ id = 1047, sku = 16600002, customer.company = 14 & Hudson , customer.name = Eric Woods]
2017-04-02T09:02:16-05:00 INFO (6): Creating Preference[ product =  1047 , sku =  16600002 , user = jmeade]
2017-04-02T09:02:16-05:00 INFO (6): Creating Product[ id = 1046, sku = 164, customer.company = 14 & Hudson , customer.name = Eric Woods]
2017-04-02T09:02:16-05:00 INFO (6): Creating Preference[ product =  1046 , sku =  164 , user = jmeade]
2017-04-02T09:02:16-05:00 INFO (6): Creating Product[ id = 92, sku = 373, customer.company = 14 & Hudson , customer.name = Eric Woods]
2017-04-02T09:02:16-05:00 INFO (6): Creating Preference[ product =  92 , sku =  373 , user = jmeade]
2017-04-02T09:02:16-05:00 INFO (6): Creating Product[ id = 936, sku = 2873, customer.company = 14 & Hudson , customer.name = Eric Woods]
2017-04-02T09:02:16-05:00 INFO (6): Creating Preference[ product =  936 , sku =  2873 , user = jmeade]
2017-04-02T09:02:16-05:00 INFO (6): Creating Product[ id = 959, sku = 1714, customer.company = 14 & Hudson , customer.name = Eric Woods]
2017-04-02T09:02:16-05:00 INFO (6): Creating Preference[ product =  959 , sku =  1714 , user = jmeade]
2017-04-02T09:02:16-05:00 INFO (6): Creating Product[ id = 941, sku = 2892, customer.company = 14 & Hudson , customer.name = Eric Woods]
2017-04-02T09:02:16-05:00 INFO (6): Creating Preference[ product =  941 , sku =  2892 , user = jmeade]
2017-04-02T09:02:16-05:00 INFO (6): Creating Product[ id = 951, sku = 467, customer.company = 14 & Hudson , customer.name = Eric Woods]
2017-04-02T09:02:16-05:00 INFO (6): Creating Preference[ product =  951 , sku =  467 , user = jmeade]
2017-04-02T09:02:16-05:00 INFO (6): Updating Product[ id = 93, sku = 2800101, ]
2017-04-02T09:02:16-05:00 INFO (6): Creating Preference[ product =  93 , sku =  2800101 , user = jmeade]
2017-04-02T09:02:16-05:00 INFO (6): Creating Product[ id = 66, sku = 2800100, customer.company = 14 & Hudson , customer.name = Eric Woods]
2017-04-02T09:02:16-05:00 INFO (6): Creating Preference[ product =  66 , sku =  2800100 , user = jmeade]
2017-04-02T09:02:16-05:00 INFO (6): Creating Product[ id = 101, sku = 2800102, customer.company = 14 & Hudson , customer.name = Eric Woods]
2017-04-02T09:02:16-05:00 INFO (6): Creating Preference[ product =  101 , sku =  2800102 , user = jmeade]
2017-04-02T09:02:16-05:00 INFO (6): Created 10 products
2017-04-02T09:02:16-05:00 INFO (6): Created 11 preferences
2017-04-02T09:02:16-05:00 INFO (6): LIMIT = LIMIT 0, 250
2017-04-02T09:02:16-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T09:02:16-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)
2017-04-02T09:02:16-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T09:02:16-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 250
2017-04-02T09:02:16-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T09:02:16-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 569 AND `user_customer`.`user_id` = 9)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 569 AND `added_product`.`active` = 1 )
2017-04-02T09:02:24-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T09:02:24-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:02:25-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T09:02:25-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:02:25-05:00 INFO (6): zff_sync: 1
2017-04-02T09:02:25-05:00 INFO (6): Syncing DB. Products Controller
2017-04-02T09:02:25-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=customerlistitems&customerid=398
2017-04-02T09:02:26-05:00 INFO (6): Web Service (Products) #: 16
2017-04-02T09:02:26-05:00 INFO (6): Customer: 398
2017-04-02T09:02:26-05:00 INFO (6): Preferences by user: 16
2017-04-02T09:02:26-05:00 INFO (6): Products: 16
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 873, sku = 16768102, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  873 , sku =  16768102 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 134, sku = 632, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  134 , sku =  632 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 648, sku = 2360, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  648 , sku =  2360 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 91, sku = 363, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  91 , sku =  363 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 77, sku = 35500001, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  77 , sku =  35500001 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 73, sku = 10003, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  73 , sku =  10003 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 253, sku = 893, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  253 , sku =  893 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 817, sku = 2882, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  817 , sku =  2882 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 95, sku = 481, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  95 , sku =  481 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 37, sku = 61, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  37 , sku =  61 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 603, sku = 551682012, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  603 , sku =  551682012 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 173, sku = 894407001599, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  173 , sku =  894407001599 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 343, sku = 8237201, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  343 , sku =  8237201 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 575, sku = 2146, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  575 , sku =  2146 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 564, sku = 1752, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  564 , sku =  1752 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Updating Product[ id = 566, sku = 8237202, ]
2017-04-02T09:02:26-05:00 INFO (6): Updating Preference[ product =  566 , sku =  8237202 , user = cmetallo]
2017-04-02T09:02:26-05:00 INFO (6): Created 0 products
2017-04-02T09:02:26-05:00 INFO (6): Created 0 preferences
2017-04-02T09:02:26-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T09:02:26-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T09:02:26-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)
2017-04-02T09:02:26-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:02:26-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T09:02:26-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:02:26-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:03:47-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T09:03:47-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:03:47-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T09:03:47-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:03:47-05:00 INFO (6): zff_sync: 1
2017-04-02T09:03:47-05:00 INFO (6): Syncing DB. Products Controller
2017-04-02T09:03:47-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=customerlistitems&customerid=398
2017-04-02T09:03:48-05:00 INFO (6): Web Service (Products) #: 16
2017-04-02T09:03:48-05:00 INFO (6): Customer: 398
2017-04-02T09:03:48-05:00 INFO (6): Preferences by user: 16
2017-04-02T09:03:48-05:00 INFO (6): Products: 16
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 873 SKU: 16768102 PRODUCTNAME: Bass - Hybrid Striped, Farmed, USA, Head On  (1lb avg)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 873, sku = 16768102, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  873 , sku =  16768102 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 134 SKU: 632 PRODUCTNAME: Chilean Sea Bass - Frozen, Wild, Argentina, Head Off (12lb avg)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 134, sku = 632, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  134 , sku =  632 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 648 SKU: 2360 PRODUCTNAME: Chilean Sea Bass - Frozen, Wild, Chile, Portions 8oz
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 648, sku = 2360, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  648 , sku =  2360 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 91 SKU: 363 PRODUCTNAME: Lobster - Frozen, Meat, K&C, Wild, Canada (2lb pkg)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 91, sku = 363, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  91 , sku =  363 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 77 SKU: 35500001 PRODUCTNAME: Lobster - Live, Cold Water, Wild, Canada, 1.5lb
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 77, sku = 35500001, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  77 , sku =  35500001 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 73 SKU: 10003 PRODUCTNAME: Mussels - Live, Whitewater, Wild, USA (10lb Bag)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 73, sku = 10003, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  73 , sku =  10003 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 253 SKU: 893 PRODUCTNAME: Salmon - Atlantic, Farmed, Norway, Head On (14lb avg)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 253, sku = 893, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  253 , sku =  893 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 817 SKU: 2882 PRODUCTNAME: Salmon - True North, Farmed, Canada, Fillets  (5lb Pair)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 817, sku = 2882, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  817 , sku =  2882 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 95 SKU: 481 PRODUCTNAME: Salmon - True North, Farmed, Canada, Head On (13lb avg)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 95, sku = 481, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  95 , sku =  481 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 37 SKU: 61 PRODUCTNAME: Scallops - Sea, Dry U/10, Shucked, Wild, USA
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 37, sku = 61, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  37 , sku =  61 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 603 SKU: 551682012 PRODUCTNAME: Shrimp - Frozen, 16/20, Farmed, P&D Tail On, India (10lb)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 603, sku = 551682012, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  603 , sku =  551682012 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 173 SKU: 894407001599 PRODUCTNAME: Shrimp - Frozen, 31/40, Farmed, P&D Tail On, India (2lb)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 173, sku = 894407001599, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  173 , sku =  894407001599 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 343 SKU: 8237201 PRODUCTNAME: Squid - Fresh, Wild, USA, Tubes & Tentacles (10lb Tub)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 343, sku = 8237201, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  343 , sku =  8237201 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 575 SKU: 2146 PRODUCTNAME: Squid - Frozen, Wild, China, 3/5 T&T (2.5lb Tray)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 575, sku = 2146, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  575 , sku =  2146 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 564 SKU: 1752 PRODUCTNAME: Squid - Frozen, Wild, USA, 5/8 T&T (2.5lb Tray)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 564, sku = 1752, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  564 , sku =  1752 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): PROCESSING: Rest Item ID: 566 SKU: 8237202 PRODUCTNAME: Squid - Frozen, Wild, USA, 5/8 T&T (30lb Case)
2017-04-02T09:03:48-05:00 INFO (6): Updating Product[ id = 566, sku = 8237202, ]
2017-04-02T09:03:48-05:00 INFO (6): Updating Preference[ product =  566 , sku =  8237202 , user = cmetallo]
2017-04-02T09:03:48-05:00 INFO (6): Created 0 products
2017-04-02T09:03:48-05:00 INFO (6): Created 0 preferences
2017-04-02T09:03:48-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T09:03:48-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T09:03:48-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)
2017-04-02T09:03:48-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:03:48-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T09:03:48-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:03:48-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:07:49-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\SalespeopleController and actionName: index
2017-04-02T09:07:49-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:07:50-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\SalespeopleController and actionName: salespeopleTable
2017-04-02T09:07:50-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:07:50-05:00 INFO (6): Retrieving Salespeople from Web Service.
2017-04-02T09:07:50-05:00 INFO (6): Retrieving salespeople.
2017-04-02T09:07:50-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=salespeople
2017-04-02T09:07:50-05:00 INFO (6): Retrieved 5 salespeople from web service
2017-04-02T09:07:50-05:00 INFO (6): Retrieved 5 salespeople from DB
2017-04-02T09:07:50-05:00 INFO (6): 
MissingFromWebService: 2
2017-04-02T09:07:50-05:00 INFO (6): 
MissingFromDB: 250
2017-04-02T09:07:50-05:00 INFO (6): Salespeople REST/DB Sync Test Results:
2017-04-02T09:07:50-05:00 INFO (6): SQL: SELECT `id`, `username`, `email`, `status`, `full_name`, `date_created`, `last_login`, `sales_attr_id` FROM `users` WHERE  sales_attr_id IS NOT NULL AND status = 1  ORDER BY `id` ASC LIMIT 0, 25
2017-04-02T09:07:50-05:00 INFO (6): SELECT COUNT(`id`) FROM  `users` WHERE  sales_attr_id IS NOT NULL AND status = 1
2017-04-02T09:07:50-05:00 INFO (6): SQL: SELECT COUNT(`id`) FROM  `users` WHERE  sales_attr_id IS NOT NULL AND status = 1
2017-04-02T09:07:50-05:00 INFO (6): SQL: SELECT COUNT(`id`) FROM `users` WHERE  sales_attr_id IS NOT NULL AND status = 1
2017-04-02T09:07:50-05:00 INFO (6): SELECT COUNT(`id`) FROM `users` WHERE  sales_attr_id IS NOT NULL AND status = 1
2017-04-02T09:07:53-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\CustomerController and actionName: view
2017-04-02T09:07:53-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:07:54-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\CustomerController and actionName: customerTable
2017-04-02T09:07:54-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:07:54-05:00 INFO (6): Syncing DB. Customer Controller
2017-04-02T09:07:54-05:00 INFO (6): Querying Customers.
2017-04-02T09:07:54-05:00 INFO (6): Querying Customers.
2017-04-02T09:07:54-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=customers&salespersonid=183
2017-04-02T09:07:55-05:00 INFO (6): inDB: 0 inWS: 46
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1663
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 400
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 397
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 694
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1216
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1463
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1073
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 758
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1761
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 842
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1065
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 698
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 743
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1628
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 399
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1838
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1466
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1243
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1172
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 944
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 581
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1469
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1193
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1063
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1064
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1036
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1053
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 833
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 46
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 989
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 606
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 746
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 398
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 568
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1879
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1493
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 713
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 401
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1239
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 567
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1683
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1019
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1577
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1062
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 391
2017-04-02T09:07:55-05:00 INFO (6): Creating DB Record ID: 1057
2017-04-02T09:07:55-05:00 INFO (6): SELECT `customers`.`id`, `customers`.`company`, `customers`.`name`, `customers`.`email`, `customers`.`created`, `customers`.`updated`, `customers`.`id` FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id` WHERE  `user_customer`.`user_id` = 5  ORDER BY `id` ASC LIMIT 0, 25
2017-04-02T09:07:55-05:00 INFO (6): SQL: SELECT `customers`.`id`, `customers`.`company`, `customers`.`name`, `customers`.`email`, `customers`.`created`, `customers`.`updated`, `customers`.`id` FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id` WHERE  `user_customer`.`user_id` = 5  ORDER BY `id` ASC LIMIT 0, 25
2017-04-02T09:07:55-05:00 INFO (6): SQL: SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`   WHERE  `user_customer`.`user_id` = 5
2017-04-02T09:07:55-05:00 INFO (6): SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`   WHERE  `user_customer`.`user_id` = 5
2017-04-02T09:07:55-05:00 INFO (6): SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`  WHERE  `user_customer`.`user_id` = 5
2017-04-02T09:07:55-05:00 INFO (6): SQL: SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`  WHERE  `user_customer`.`user_id` = 5
2017-04-02T09:07:59-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\CustomerController and actionName: customerTable
2017-04-02T09:07:59-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:07:59-05:00 INFO (6): DB Sync Skipped on subsequent ajax.
2017-04-02T09:07:59-05:00 INFO (6): SELECT `customers`.`id`, `customers`.`company`, `customers`.`name`, `customers`.`email`, `customers`.`created`, `customers`.`updated`, `customers`.`id` FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id` WHERE  `user_customer`.`user_id` = 5  ORDER BY `company` ASC LIMIT 0, 25
2017-04-02T09:07:59-05:00 INFO (6): SQL: SELECT `customers`.`id`, `customers`.`company`, `customers`.`name`, `customers`.`email`, `customers`.`created`, `customers`.`updated`, `customers`.`id` FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id` WHERE  `user_customer`.`user_id` = 5  ORDER BY `company` ASC LIMIT 0, 25
2017-04-02T09:07:59-05:00 INFO (6): SQL: SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`   WHERE  `user_customer`.`user_id` = 5
2017-04-02T09:07:59-05:00 INFO (6): SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`   WHERE  `user_customer`.`user_id` = 5
2017-04-02T09:07:59-05:00 INFO (6): SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`  WHERE  `user_customer`.`user_id` = 5
2017-04-02T09:07:59-05:00 INFO (6): SQL: SELECT COUNT(`customers`.`id`) FROM `user_customer` LEFT OUTER JOIN `customers` ON `user_customer`.`customer_id` = `customers`.`id`  WHERE  `user_customer`.`user_id` = 5
2017-04-02T09:08:02-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T09:08:02-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:08:02-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T09:08:02-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:08:02-05:00 INFO (6): zff_sync: 1
2017-04-02T09:08:02-05:00 INFO (6): Syncing DB. Products Controller
2017-04-02T09:08:02-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=customerlistitems&customerid=398
2017-04-02T09:08:03-05:00 INFO (6): Web Service (Products) #: 16
2017-04-02T09:08:03-05:00 INFO (6): Customer: 398
2017-04-02T09:08:03-05:00 INFO (6): Preferences by user: 0
2017-04-02T09:08:03-05:00 INFO (6): Products: 0
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 873 SKU: 16768102 PRODUCTNAME: Bass - Hybrid Striped, Farmed, USA, Head On  (1lb avg)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 873, sku = 16768102, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  873 , sku =  16768102 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 134 SKU: 632 PRODUCTNAME: Chilean Sea Bass - Frozen, Wild, Argentina, Head Off (12lb avg)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 134, sku = 632, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  134 , sku =  632 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 648 SKU: 2360 PRODUCTNAME: Chilean Sea Bass - Frozen, Wild, Chile, Portions 8oz
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 648, sku = 2360, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  648 , sku =  2360 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 91 SKU: 363 PRODUCTNAME: Lobster - Frozen, Meat, K&C, Wild, Canada (2lb pkg)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 91, sku = 363, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  91 , sku =  363 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 77 SKU: 35500001 PRODUCTNAME: Lobster - Live, Cold Water, Wild, Canada, 1.5lb
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 77, sku = 35500001, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  77 , sku =  35500001 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 73 SKU: 10003 PRODUCTNAME: Mussels - Live, Whitewater, Wild, USA (10lb Bag)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 73, sku = 10003, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  73 , sku =  10003 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 253 SKU: 893 PRODUCTNAME: Salmon - Atlantic, Farmed, Norway, Head On (14lb avg)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 253, sku = 893, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  253 , sku =  893 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 817 SKU: 2882 PRODUCTNAME: Salmon - True North, Farmed, Canada, Fillets  (5lb Pair)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 817, sku = 2882, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  817 , sku =  2882 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 95 SKU: 481 PRODUCTNAME: Salmon - True North, Farmed, Canada, Head On (13lb avg)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 95, sku = 481, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  95 , sku =  481 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 37 SKU: 61 PRODUCTNAME: Scallops - Sea, Dry U/10, Shucked, Wild, USA
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 37, sku = 61, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  37 , sku =  61 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 603 SKU: 551682012 PRODUCTNAME: Shrimp - Frozen, 16/20, Farmed, P&D Tail On, India (10lb)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 603, sku = 551682012, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  603 , sku =  551682012 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 173 SKU: 894407001599 PRODUCTNAME: Shrimp - Frozen, 31/40, Farmed, P&D Tail On, India (2lb)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 173, sku = 894407001599, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  173 , sku =  894407001599 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 343 SKU: 8237201 PRODUCTNAME: Squid - Fresh, Wild, USA, Tubes & Tentacles (10lb Tub)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 343, sku = 8237201, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  343 , sku =  8237201 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 575 SKU: 2146 PRODUCTNAME: Squid - Frozen, Wild, China, 3/5 T&T (2.5lb Tray)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 575, sku = 2146, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:03-05:00 INFO (6): Creating Preference[ product =  575 , sku =  2146 , user = cmetallo]
2017-04-02T09:08:03-05:00 INFO (6): PROCESSING: Rest Item ID: 564 SKU: 1752 PRODUCTNAME: Squid - Frozen, Wild, USA, 5/8 T&T (2.5lb Tray)
2017-04-02T09:08:03-05:00 INFO (6): Creating Product[ id = 564, sku = 1752, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:04-05:00 INFO (6): Creating Preference[ product =  564 , sku =  1752 , user = cmetallo]
2017-04-02T09:08:04-05:00 INFO (6): PROCESSING: Rest Item ID: 566 SKU: 8237202 PRODUCTNAME: Squid - Frozen, Wild, USA, 5/8 T&T (30lb Case)
2017-04-02T09:08:04-05:00 INFO (6): Creating Product[ id = 566, sku = 8237202, customer.company = 240 - The Abbey, customer.name = Josh North]
2017-04-02T09:08:04-05:00 INFO (6): Creating Preference[ product =  566 , sku =  8237202 , user = cmetallo]
2017-04-02T09:08:04-05:00 INFO (6): Created 16 products
2017-04-02T09:08:04-05:00 INFO (6): Created 16 preferences
2017-04-02T09:08:04-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T09:08:04-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T09:08:04-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)
2017-04-02T09:08:04-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:08:04-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T09:08:04-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:08:04-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:09:47-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: view
2017-04-02T09:09:47-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:09:48-05:00 INFO (6): (User\Module.php): Checking controllerName: Application\Controller\ProductController and actionName: productTable
2017-04-02T09:09:48-05:00 INFO (6): (User\Module.php): Authentication Service has logged-in user.
2017-04-02T09:09:48-05:00 INFO (6): zff_sync: 1
2017-04-02T09:09:48-05:00 INFO (6): Syncing DB. Products Controller
2017-04-02T09:09:48-05:00 INFO (6): Calling WebService with GET URL: https://svc.localhost/bySKU.php?id=jpalmer&pw=goodbass&object=customerlistitems&customerid=398
2017-04-02T09:09:49-05:00 INFO (6): Web Service (Products) #: 16
2017-04-02T09:09:49-05:00 INFO (6): Customer: 398
2017-04-02T09:09:49-05:00 INFO (6): Preferences by user: 16
2017-04-02T09:09:49-05:00 INFO (6): Products: 16
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 873 SKU: 16768102 PRODUCTNAME: Bass - Hybrid Striped, Farmed, USA, Head On  (1lb avg)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 873, sku = 16768102, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  873 , sku =  16768102 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 134 SKU: 632 PRODUCTNAME: Chilean Sea Bass - Frozen, Wild, Argentina, Head Off (12lb avg)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 134, sku = 632, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  134 , sku =  632 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 648 SKU: 2360 PRODUCTNAME: Chilean Sea Bass - Frozen, Wild, Chile, Portions 8oz
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 648, sku = 2360, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  648 , sku =  2360 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 91 SKU: 363 PRODUCTNAME: Lobster - Frozen, Meat, K&C, Wild, Canada (2lb pkg)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 91, sku = 363, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  91 , sku =  363 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 77 SKU: 35500001 PRODUCTNAME: Lobster - Live, Cold Water, Wild, Canada, 1.5lb
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 77, sku = 35500001, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  77 , sku =  35500001 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 73 SKU: 10003 PRODUCTNAME: Mussels - Live, Whitewater, Wild, USA (10lb Bag)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 73, sku = 10003, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  73 , sku =  10003 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 253 SKU: 893 PRODUCTNAME: Salmon - Atlantic, Farmed, Norway, Head On (14lb avg)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 253, sku = 893, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  253 , sku =  893 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 817 SKU: 2882 PRODUCTNAME: Salmon - True North, Farmed, Canada, Fillets  (5lb Pair)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 817, sku = 2882, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  817 , sku =  2882 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 95 SKU: 481 PRODUCTNAME: Salmon - True North, Farmed, Canada, Head On (13lb avg)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 95, sku = 481, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  95 , sku =  481 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 37 SKU: 61 PRODUCTNAME: Scallops - Sea, Dry U/10, Shucked, Wild, USA
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 37, sku = 61, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  37 , sku =  61 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 603 SKU: 551682012 PRODUCTNAME: Shrimp - Frozen, 16/20, Farmed, P&D Tail On, India (10lb)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 603, sku = 551682012, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  603 , sku =  551682012 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 173 SKU: 894407001599 PRODUCTNAME: Shrimp - Frozen, 31/40, Farmed, P&D Tail On, India (2lb)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 173, sku = 894407001599, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  173 , sku =  894407001599 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 343 SKU: 8237201 PRODUCTNAME: Squid - Fresh, Wild, USA, Tubes & Tentacles (10lb Tub)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 343, sku = 8237201, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  343 , sku =  8237201 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 575 SKU: 2146 PRODUCTNAME: Squid - Frozen, Wild, China, 3/5 T&T (2.5lb Tray)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 575, sku = 2146, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  575 , sku =  2146 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 564 SKU: 1752 PRODUCTNAME: Squid - Frozen, Wild, USA, 5/8 T&T (2.5lb Tray)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 564, sku = 1752, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  564 , sku =  1752 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): PROCESSING: Rest Item ID: 566 SKU: 8237202 PRODUCTNAME: Squid - Frozen, Wild, USA, 5/8 T&T (30lb Case)
2017-04-02T09:09:49-05:00 INFO (6): Updating Product[ id = 566, sku = 8237202, ]
2017-04-02T09:09:49-05:00 INFO (6): Updating Preference[ product =  566 , sku =  8237202 , user = cmetallo]
2017-04-02T09:09:49-05:00 INFO (6): Created 0 products
2017-04-02T09:09:49-05:00 INFO (6): Created 0 preferences
2017-04-02T09:09:49-05:00 INFO (6): LIMIT = LIMIT 0, 25
2017-04-02T09:09:49-05:00 INFO (6): ORDER = ORDER BY `productname` ASC
2017-04-02T09:09:49-05:00 INFO (6): SSPUnion built (PRE) WHERE clause: (`customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)
2017-04-02T09:09:49-05:00 INFO (6): SSPUnion built (POST) WHERE clause: (`added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:09:49-05:00 INFO (6): Main Query SQL: (SELECT          IFNULL(item_table_checkbox.checked, 0) 		as 'checked',          CONCAT('P', products.id) 			as 'id',          products.sku					as 'sku',          products.productname				as 'productname',          products.description				as 'description',          products.wholesale				as 'wholesale',          products.retail					as 'retail',          products.uom					as 'uom',          products.`status`				as 'status',          products.saturdayenabled			as 'saturdayenabled',          item_price_override.overrideprice		as 'overrideprice',          `user_product_preferences`.`comment`		as 'comment',          `user_product_preferences`.`option`		as 'option'              FROM item_table_checkbox                  RIGHT JOIN products ON item_table_checkbox.product = products.id                  LEFT JOIN customer_product ON products.id = customer_product.product                  LEFT JOIN item_price_override                      ON (products.id = item_price_override.product AND                          customer_product.customer = item_price_override.customer AND                          item_price_override.salesperson = item_table_checkbox.salesperson AND                          item_price_override.active = 1)                  LEFT JOIN user_customer                      ON (customer_product.customer = user_customer.customer_id)                  LEFT JOIN user_product_preferences                      ON (products.id = user_product_preferences.product_id AND                          user_customer.user_id = user_product_preferences.user_id)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5) UNION (            SELECT                IFNULL(`item_table_checkbox`.`checked`, 0)      as 'checked',                CONCAT('A', `added_product`.`id`)         as 'id',                `added_product`.`sku`                     as 'sku',                `added_product`.`productname`             as 'productname',                `added_product`.`description`             as 'description',                (select null)                               as 'wholesale',                (select null)                               as 'retail',                `added_product`.`uom`                     as 'uom',                `added_product`.`status`                as 'status',                (select 1)                                  as 'saturdayenabled',                `added_product`.`overrideprice`           as 'overrideprice',                `added_product`.`comment`              as 'comment',                (select null)                               as 'option'            FROM `item_table_checkbox`                RIGHT JOIN `added_product`                ON `added_product`.`id` = `item_table_checkbox`.`added_product`  WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 ) ORDER BY `productname` ASC LIMIT 0, 25
2017-04-02T09:09:49-05:00 INFO (6): Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
2017-04-02T09:09:49-05:00 INFO (6): Non-Filtered Count Query SQL: SELECT (SELECT count(products.id)      FROM item_table_checkbox          RIGHT JOIN products ON item_table_checkbox.product = products.id          LEFT JOIN customer_product ON products.id = customer_product.product          LEFT JOIN user_customer ON (customer_product.customer = user_customer.customer_id)          LEFT JOIN user_product_preferences              ON (products.id = user_product_preferences.product_id AND              user_customer.user_id  = user_product_preferences.user_id)          LEFT JOIN item_price_override              ON ( products.id = item_price_override.product AND              customer_product.customer = item_price_override.customer AND              item_price_override.salesperson = item_table_checkbox.salesperson AND              item_price_override.active = 1)  WHERE `customer_product`.`customer` = 398 AND `user_customer`.`user_id` = 5)+(SELECT count(item_table_checkbox.id)      FROM item_table_checkbox          RIGHT JOIN added_product              ON added_product.id = item_table_checkbox.added_product WHERE `added_product`.`customer` = 398 AND `added_product`.`active` = 1 )
